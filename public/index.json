[{"authors":["admin"],"categories":null,"content":"My name is Josh White. I\u0026rsquo;m an aspiring academic\u0026mdash;currently a mere graduate student\u0026mdash;living in Melbourne, Australia. I\u0026rsquo;m interested in Moral Psychology, Political Psychology, Experimental Philosophy and Cognitive Psychology; and how new data analysis techniques and big data can elucidate the perennial questions in these domains. Previously, I worked as a litigation lawyer so I\u0026rsquo;ve also got a healthy interest in the theoretical side of the law too \u0026hellip; just not so much the practical side.\n","date":1554103846,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1554103846,"objectID":"598b63dd58b43bce02403646f240cd3c","permalink":"/authors/admin/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/authors/admin/","section":"author","summary":"My name is Josh White. I\u0026rsquo;m an aspiring academic\u0026mdash;currently a mere graduate student\u0026mdash;living in Melbourne, Australia. I\u0026rsquo;m interested in Moral Psychology, Political Psychology, Experimental Philosophy and Cognitive Psychology; and how new data analysis techniques and big data can elucidate the perennial questions in these domains. Previously, I worked as a litigation lawyer so I\u0026rsquo;ve also got a healthy interest in the theoretical side of the law too \u0026hellip; just not so much the practical side.","tags":null,"title":"Joshua White","type":"author"},{"authors":null,"categories":null,"content":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.main]] menu links to it in the config.toml.\n","date":1536415200,"expirydate":-62135596800,"kind":"section","lang":"en","lastmod":1554039218,"objectID":"c3224f3a64174f08aaf31e1f1d16ffd3","permalink":"/tutorial/","publishdate":"2018-09-09T00:00:00+10:00","relpermalink":"/tutorial/","section":"tutorial","summary":"This feature can be used for publishing content such as:\n Project or software documentation Online courses Tutorials  The parent folder may be renamed, for example, to docs for project documentation or course for creating an online course.\nTo disable this feature, either delete the parent folder, or set draft = true in the front matter of all its pages.\nAfter renaming or deleting the parent folder, you may wish to update any [[menu.","tags":null,"title":"Overview","type":"docs"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.\n  Slides can be added in a few ways:\n Create slides using Academic\u0026rsquo;s Slides feature and link using url_slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further talk details can easily be added to this page using Markdown and $\\rm \\LaTeX$ math code.\n","date":1906513200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"96344c08df50a1b693cc40432115cbe3","permalink":"/talk/example/","publishdate":"2017-01-01T00:00:00+11:00","relpermalink":"/talk/example/","section":"talk","summary":"An example talk using Academic's Markdown slides feature.","tags":[],"title":"Example Talk","type":"talk"},{"authors":null,"categories":["R"],"content":"\r\rNormal and Poisson models\rPreparatory steps\rPossion model simulations\rNormal model simulations\r\rRankings Model: Tanh\rPostscript: How are my models fairing so far?\r\r\rParts 1 and 2 of this series made attempts to model, and them simulate, the 2018 and 2019 AFL seasons. These models were extremely simplistic, but were none-the-less interesting.\nNormal and Poisson models\rPreparatory steps\r#average H or A\rAverage \u0026lt;- pointssummary %\u0026gt;% group_by(HorA, FororAgainst) %\u0026gt;% summarise(Points = mean(Points)) Homeaveragefor \u0026lt;- as.numeric(Average[4, 3])\rHomeaverageagainst \u0026lt;- as.numeric(Average[3, 3])\rAwayaveragefor \u0026lt;- as.numeric(Average[2, 3])\rAwayaverageagainst \u0026lt;- as.numeric(Average[1, 3])\r####Get strengths####\r# create functions to get Strenths\rAttackstrengthH \u0026lt;- function(T){\ras.numeric((pointssummary %\u0026gt;% filter(Team == T, HorA == \u0026quot;H\u0026quot;, FororAgainst == \u0026quot;For\u0026quot;) %\u0026gt;%\rselect(Points))/Homeaveragefor)\r}\rAttackstrengthA \u0026lt;- function(T){\ras.numeric((pointssummary %\u0026gt;% filter(Team == T, HorA == \u0026quot;A\u0026quot;, FororAgainst == \u0026quot;For\u0026quot;) %\u0026gt;% select(Points))/Awayaveragefor)\r}\rDefencestrengthH \u0026lt;- function(T){\ras.numeric(Homeaverageagainst/(pointssummary %\u0026gt;% filter(Team == T, HorA == \u0026quot;H\u0026quot;, FororAgainst == \u0026quot;Against\u0026quot;) %\u0026gt;% select(Points)))\r}\rDefencestrengthA \u0026lt;-function(T){\ras.numeric(Awayaverageagainst/(pointssummary %\u0026gt;% filter(Team == T, HorA == \u0026quot;A\u0026quot;, FororAgainst == \u0026quot;Against\u0026quot;) %\u0026gt;%\rselect(Points)))\r}\r#get table with all strengths\r#create tibble\rstrengths \u0026lt;- tibble(Team = unique(pointssummary$Team), AstrengthH = NA, AstrengthA = NA, DstrengthH = NA, DstrengthA = NA)\r# populate with strengths\rstrengths$AstrengthH \u0026lt;- map_dbl(strengths$Team, AttackstrengthH)\rstrengths$AstrengthA \u0026lt;- map_dbl(strengths$Team, AttackstrengthA)\rstrengths$DstrengthH \u0026lt;- map_dbl(strengths$Team, DefencestrengthH)\rstrengths$DstrengthA \u0026lt;- map_dbl(strengths$Team, DefencestrengthA)\r####calculate paramater values: lambda and sd####\rlambdas.2019 \u0026lt;- add_column(fixture2019, homelambda = NA, homesd = NA, awaylambda = NA, awaysd = NA)\r#create lambda and sd functions\rlambdahometeam \u0026lt;- function(HomeTeam, AwayTeam) {\rHometeamattackstrength \u0026lt;- as.numeric(strengths[strengths$Team == HomeTeam, \u0026quot;AstrengthH\u0026quot;])\rAwayteamdefencestrength \u0026lt;- as.numeric(strengths[strengths$Team == AwayTeam, \u0026quot;DstrengthA\u0026quot;])\rreturn(Homeaveragefor * Hometeamattackstrength / Awayteamdefencestrength)\r}\rlambdaawayteam \u0026lt;- function(AwayTeam, HomeTeam) {\rAwayteamattackstrength \u0026lt;- as.numeric(strengths[strengths$Team == AwayTeam, \u0026quot;AstrengthA\u0026quot;])\rHometeamdefencestrength \u0026lt;- as.numeric(strengths[strengths$Team == HomeTeam, \u0026quot;DstrengthH\u0026quot;])\rreturn(Awayaveragefor * Awayteamattackstrength / Hometeamdefencestrength)\r}\rsdhometeam \u0026lt;- function(HomeTeam, AwayTeam) {\rHometeamattack \u0026lt;- as.numeric(pointssummary %\u0026gt;% filter(Team == HomeTeam, HorA == \u0026quot;H\u0026quot;, FororAgainst == \u0026quot;For\u0026quot;) %\u0026gt;%\rselect(sd))\rAwayteamdefence \u0026lt;- as.numeric(pointssummary %\u0026gt;% filter(Team == AwayTeam, HorA == \u0026quot;A\u0026quot;, FororAgainst == \u0026quot;Against\u0026quot;) %\u0026gt;%\rselect(sd))\r# becuase n is equal can simply take average.\rreturn(mean(Hometeamattack, Awayteamdefence))\r}\rsdawayteam \u0026lt;- function(AwayTeam, HomeTeam) {\rAwayteamattack \u0026lt;- as.numeric(pointssummary %\u0026gt;% filter(Team == AwayTeam, HorA == \u0026quot;A\u0026quot;, FororAgainst == \u0026quot;For\u0026quot;) %\u0026gt;%\rselect(sd))\rHometeamdefence \u0026lt;- as.numeric(pointssummary %\u0026gt;% filter(Team == HomeTeam, HorA == \u0026quot;H\u0026quot;, FororAgainst == \u0026quot;Against\u0026quot;) %\u0026gt;%\rselect(sd))\r# becuase n is equal can simply take average.\rreturn(mean(Awayteamattack, Hometeamdefence))\r}\r#populate lamba values for (i in 1:nrow(lambdas.2019)) {\rlambdas.2019$homelambda[i] \u0026lt;- lambdahometeam(lambdas.2019$Hometeam[i], lambdas.2019$Awayteam[i])\rlambdas.2019$awaylambda[i] \u0026lt;- lambdaawayteam(lambdas.2019$Awayteam[i], lambdas.2019$Hometeam[i])\rlambdas.2019$homesd[i] \u0026lt;- sdhometeam(lambdas.2019$Hometeam[i], lambdas.2019$Awayteam[i])\rlambdas.2019$awaysd[i] \u0026lt;- sdawayteam(lambdas.2019$Awayteam[i], lambdas.2019$Hometeam[i])\r}\r\rPossion model simulations\r####POISSON SIMULATION####\rNsim.pois.2019 \u0026lt;- 10\r#set up simulation results table\rSimResults \u0026lt;- matrix(data = 0, nrow = Nsim.pois.2019, ncol = 18)\rcolnames(SimResults) \u0026lt;- strengths$Team\rfor (i in 1:Nsim.pois.2019){\r#create Ladder for each season\rLadder \u0026lt;- tibble(Team = strengths$Team, W = 0, L = 0, D = 0, Pts = 0,\rFor = 0, Against = 0, Pct = 0)\r#simulate each season.\rfor (j in 1:nrow(lambdas.2019)) {\r#Here is the model working -- each score is simply a random drawing #from a poisson distribution described by our calculated lambas\rhomescore \u0026lt;- rpois(1, lambdas.2019$homelambda[j])\rawayscore \u0026lt;- rpois(1, lambdas.2019$awaylambda[j])\rhometeam \u0026lt;- lambdas.2019$Hometeam[j]\rawayteam \u0026lt;- lambdas.2019$Awayteam[j]\r#populate scores\rLadder[Ladder$Team == hometeam,]$For \u0026lt;- Ladder[Ladder$Team == hometeam,]$For + homescore\rLadder[Ladder$Team == hometeam,]$Against \u0026lt;- Ladder[Ladder$Team == hometeam,]$Against + awayscore Ladder[Ladder$Team == awayteam,]$For \u0026lt;- Ladder[Ladder$Team == awayteam,]$For + awayscore\rLadder[Ladder$Team == awayteam,]$Against \u0026lt;- Ladder[Ladder$Team == awayteam,]$Against + homescore\r#populate table for draw\rif (homescore == awayscore) {\r#hometeam changes\rLadder[Ladder$Team == hometeam,]$D \u0026lt;- Ladder[Ladder$Team == hometeam,]$D + 1\r#awayteam changes\rLadder[Ladder$Team == awayteam,]$D \u0026lt;- Ladder[Ladder$Team == awayteam,]$D + 1\r#populate table for hometeam win\r} else if (homescore \u0026gt; awayscore) {\r#hometeam changes\rLadder[Ladder$Team == hometeam,]$W \u0026lt;- Ladder[Ladder$Team == hometeam,]$W + 1\r#awayteam changes\rLadder[Ladder$Team == awayteam,]$L \u0026lt;- Ladder[Ladder$Team == awayteam,]$L + 1\r#populate for away team win\r} else {\r#hometeam changes\rLadder[Ladder$Team == hometeam,]$L \u0026lt;- Ladder[Ladder$Team == hometeam,]$L + 1\r#awayteam changes\rLadder[Ladder$Team == awayteam,]$W \u0026lt;- Ladder[Ladder$Team == awayteam,]$W + 1\r}\r}\r#calculate points and percentage and order final table\r#note that under AFL rules, if points are equal then ranked by percentage\rLadder$Pct \u0026lt;- Ladder$For / Ladder$Against * 100\rLadder$Pts \u0026lt;- (Ladder$W * 4) + (Ladder$D * 2)\rFinalLadder \u0026lt;- Ladder %\u0026gt;% arrange(desc(Pts), desc(Pct))\r#populate simulation results table\rfor (k in 1:nrow(FinalLadder)) {\rSimResults[i, FinalLadder$Team[k]] \u0026lt;- k\r}\r} #Print and inspect results of Simulations\rSimResultspois.2019 \u0026lt;- as_tibble(SimResults)\r#Make table summarising results of simulation\rFinalsimtable \u0026lt;- cbind.data.frame(MeanPos = colMeans(SimResultspois.2019),\rMedianPos = apply(SimResultspois.2019, 2, median),\rBestPos = apply(SimResultspois.2019, 2, min),\rWorstPos = apply(SimResultspois.2019, 2, max),\rpercentWon = apply(SimResultspois.2019 == 1, 2, sum)/nrow(SimResultspois.2019)*100,\rpercentTop4 = apply(SimResultspois.2019 \u0026lt;= 4, 2, sum)/nrow(SimResultspois.2019)*100,\rpercentTop8 = apply(SimResultspois.2019 \u0026lt;= 8, 2, sum)/nrow(SimResultspois.2019)*100,\rpercentBottom4 = apply(SimResultspois.2019 \u0026gt; 14, 2, sum)/nrow(SimResultspois.2019)*100,\rpercentLast = apply(SimResultspois.2019 == 18, 2, sum)/nrow(SimResultspois.2019)*100) %\u0026gt;%\rcbind.data.frame(Team = strengths$Team) Finalsimtablepois.2019 \u0026lt;- Finalsimtable[,c(10, 2, 1, 3:9)] %\u0026gt;% arrange(MedianPos, MeanPos)\r\rNormal model simulations\r####NORM SIMULATIONS####\rNsim.norm.2019 \u0026lt;- 10\r#set up simulation results table\rSimResults \u0026lt;- matrix(data = 0, nrow = Nsim.norm.2019, ncol = 18)\rcolnames(SimResults) \u0026lt;- strengths$Team\rfor (i in 1:Nsim.norm.2019){\r#create Ladder for each season\rLadder \u0026lt;- tibble(Team = strengths$Team, W = 0, L = 0, D = 0, Pts = 0,\rFor = 0, Against = 0, Pct = 0)\r#simulate each season.\rfor (j in 1:nrow(lambdas.2019)) {\r#Here is the model working -- each score is simply a random drawing #from a normal dist characterised by our lambda as mean, and sd\rhomescore \u0026lt;- rnorm(1, mean = lambdas.2019$homelambda[j], sd = lambdas.2019$homesd[j])\rawayscore \u0026lt;- rnorm(1, lambdas.2019$awaylambda[j], sd = lambdas.2019$awaysd[j])\rhometeam \u0026lt;- lambdas.2019$Hometeam[j]\rawayteam \u0026lt;- lambdas.2019$Awayteam[j]\r#populate scores\rLadder[Ladder$Team == hometeam,]$For \u0026lt;- Ladder[Ladder$Team == hometeam,]$For + homescore\rLadder[Ladder$Team == hometeam,]$Against \u0026lt;- Ladder[Ladder$Team == hometeam,]$Against + awayscore Ladder[Ladder$Team == awayteam,]$For \u0026lt;- Ladder[Ladder$Team == awayteam,]$For + awayscore\rLadder[Ladder$Team == awayteam,]$Against \u0026lt;- Ladder[Ladder$Team == awayteam,]$Against + homescore\r#populate table for draw\rif (homescore == awayscore) {\r#hometeam changes\rLadder[Ladder$Team == hometeam,]$D \u0026lt;- Ladder[Ladder$Team == hometeam,]$D + 1\r#awayteam changes\rLadder[Ladder$Team == awayteam,]$D \u0026lt;- Ladder[Ladder$Team == awayteam,]$D + 1\r#populate table for hometeam win\r} else if (homescore \u0026gt; awayscore) {\r#hometeam changes\rLadder[Ladder$Team == hometeam,]$W \u0026lt;- Ladder[Ladder$Team == hometeam,]$W + 1\r#awayteam changes\rLadder[Ladder$Team == awayteam,]$L \u0026lt;- Ladder[Ladder$Team == awayteam,]$L + 1\r#populate for away team win\r} else {\r#hometeam changes\rLadder[Ladder$Team == hometeam,]$L \u0026lt;- Ladder[Ladder$Team == hometeam,]$L + 1\r#awayteam changes\rLadder[Ladder$Team == awayteam,]$W \u0026lt;- Ladder[Ladder$Team == awayteam,]$W + 1\r}\r}\r#calculate points and percentage and order final table\r#note that under AFL rules, if points are equal then ranked by percentage\rLadder$Pct \u0026lt;- Ladder$For / Ladder$Against * 100\rLadder$Pts \u0026lt;- (Ladder$W * 4) + (Ladder$D * 2)\rFinalLadder \u0026lt;- Ladder %\u0026gt;% arrange(desc(Pts), desc(Pct))\r#populate simulation results table\rfor (k in 1:nrow(FinalLadder)) {\rSimResults[i, FinalLadder$Team[k]] \u0026lt;- k\r}\r} #Print and inspect results of Simulation\rSimResultsnorm.2019 \u0026lt;- as_tibble(SimResults)\r#Make tabe summarising results of simulation\rFinalsimtable.2019 \u0026lt;- cbind.data.frame(MeanPos = colMeans(SimResultsnorm.2019),\rMedianPos = apply(SimResultsnorm.2019, 2, median),\rBestPos = apply(SimResultsnorm.2019, 2, min),\rWorstPos = apply(SimResultsnorm.2019, 2, max),\rpercentWon = apply(SimResultsnorm.2019 == 1, 2, sum)/nrow(SimResultsnorm.2019)*100,\rpercentTop4 = apply(SimResultsnorm.2019 \u0026lt;= 4, 2, sum)/nrow(SimResultsnorm.2019)*100,\rpercentTop8 = apply(SimResultsnorm.2019 \u0026lt;= 8, 2, sum)/nrow(SimResultsnorm.2019)*100,\rpercentBottom4 = apply(SimResultsnorm.2019 \u0026gt; 14, 2, sum)/nrow(SimResultsnorm.2019)*100,\rpercentLast = apply(SimResultsnorm.2019 == 18, 2, sum)/nrow(SimResultsnorm.2019)*100) %\u0026gt;%\rcbind.data.frame(Team = strengths$Team)\rFinalsimtablenorm.2019 \u0026lt;- Finalsimtable[,c(10, 2, 1, 3:9)] %\u0026gt;% arrange(MedianPos, MeanPos)\r\r\rRankings Model: Tanh\r####TANH MODEL SIMULATIONS####\r#set some params and functions\rdrawrate \u0026lt;- 7 / (198*5)\rdrawparam \u0026lt;- atanh(-drawrate)\rprobwin \u0026lt;- function(a, b, w, d = drawparam){\rreturn((tanh(((a - b)/w) + d) + 1)/ 2)}\r# reverse ladder order to get rankings needed for the model\rrankings \u0026lt;- rev(finalTable2018$Team)\r##SIMULATIONS## Nsim.tanh.2019 \u0026lt;- 10 # for each weight parameter looped over\rw \u0026lt;- 20\r#create table for each simulation\rgameresults.tanh \u0026lt;- matrix(data = 0, nrow = Nsim.tanh.2019, ncol = nrow(fixture2019))\r#initilise lists\rgameresultslist\u0026lt;- list()\rSimResultsList.2019 \u0026lt;- list()\rFinalsimlist.2019 \u0026lt;- list()\r#loop over weight factor for (i in 1:nrow(fixture2019)) {\rPW \u0026lt;- probwin(match(fixture2019[i, 1], rankings),\rmatch(fixture2019[i, 2], rankings), w)\rPL \u0026lt;- probwin(match(fixture2019[i, 2], rankings),\rmatch(fixture2019[i, 1], rankings), w)\rPD \u0026lt;- 1 - PW - PL gameresults.tanh[,i] \u0026lt;- sample(x = c(\u0026quot;W\u0026quot;, \u0026quot;L\u0026quot;, \u0026quot;D\u0026quot;), size = Nsim.tanh.2019, replace = TRUE, prob = c(PW, PL, PD))\r}\rgameresultslist[[w]] \u0026lt;- gameresults.tanh\r#create sim results\rSimResults \u0026lt;- matrix(data = 0, nrow = Nsim.tanh.2019, ncol = 18)\rcolnames(SimResults) \u0026lt;- strengths$Team\rfor (i in 1:nrow(gameresults.tanh)) {\r#create the ladder for each season.\rLadder \u0026lt;- tibble(Team = Ladder$Team, W = 0, L = 0, D = 0, Pts = 0)\rfor (j in 1:ncol(gameresults.tanh)){\rhometeam.tanh \u0026lt;- as.character(fixture2019[j,1])\rawayteam.tanh \u0026lt;- as.character(fixture2019[j,2])\rif(gameresultslist[[w]][i,j] == \u0026quot;W\u0026quot;) { Ladder[Ladder$Team == hometeam.tanh,]$W \u0026lt;- Ladder[Ladder$Team == hometeam.tanh,]$W + 1 Ladder[Ladder$Team == awayteam.tanh,]$L \u0026lt;- Ladder[Ladder$Team == awayteam.tanh,]$L + 1\r} else if (gameresultslist[[w]][i,j] == \u0026quot;L\u0026quot;) {\rLadder[Ladder$Team == hometeam.tanh,]$L \u0026lt;- Ladder[Ladder$Team == hometeam.tanh,]$L + 1\rLadder[Ladder$Team == awayteam.tanh,]$W \u0026lt;- Ladder[Ladder$Team == awayteam.tanh,]$W + 1 } else {\rLadder[Ladder$Team == hometeam.tanh,]$D \u0026lt;- Ladder[Ladder$Team == hometeam.tanh,]$D + 1\rLadder[Ladder$Team == awayteam.tanh,]$D \u0026lt;- Ladder[Ladder$Team == awayteam.tanh,]$D + 1\r}\r} #calculate points and percentage and order final table\r#note that under AFL rules, if points are equal then ranked by percentage\rLadder$Pts \u0026lt;- (Ladder$W * 4) + (Ladder$D * 2)\rFinalLadder \u0026lt;- Ladder %\u0026gt;% arrange(desc(Pts), desc(rankings))\r#populate simulation results table\rfor (k in 1:nrow(FinalLadder)) {\rSimResults[i, FinalLadder$Team[k]] \u0026lt;- k\rSimResultsList.2019[[w]] \u0026lt;- SimResults\r}\r}\r#Make tabe summarising results of simulation\rFinalsimtabletanh \u0026lt;- cbind.data.frame(MeanPos = colMeans(SimResultsList.2019[[w]]),\rMedianPos = apply(SimResultsList.2019[[w]], 2, median),\rBestPos = apply(SimResultsList.2019[[w]], 2, min),\rWorstPos = apply(SimResultsList.2019[[w]], 2, max),\rpercentWon = apply(SimResultsList.2019[[w]] == 1, 2, sum)/nrow(SimResultsList.2019[[w]])*100,\rpercentTop4 = apply(SimResultsList.2019[[w]] \u0026lt;= 4, 2, sum)/nrow(SimResultsList.2019[[w]])*100,\rpercentTop8 = apply(SimResultsList.2019[[w]] \u0026lt;= 8, 2, sum)/nrow(SimResultsList.2019[[w]])*100,\rpercentBottom4 = apply(SimResultsList.2019[[w]] \u0026gt; 14, 2, sum)/nrow(SimResultsList.2019[[w]])*100,\rpercentLast = apply(SimResultsList.2019[[w]] == 18, 2, sum)/nrow(SimResultsList.2019[[w]])*100) %\u0026gt;%\rcbind.data.frame(Team = strengths$Team) Finalsimtabletanh \u0026lt;- Finalsimtabletanh[,c(10, 2, 1, 3:9)] %\u0026gt;% arrange(MedianPos, MeanPos)\rFinalsimlist.2019[[w]] \u0026lt;- Finalsimtabletanh\r\rPostscript: How are my models fairing so far?\rWe are now 4 weeks into the 22 week AFL season, and the models are not looking so good. THis is really quite unsurprising — The first few weeks of the AFL season are always a tumultous time. Here\n\r","date":1555027200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1555027200,"objectID":"977b09d87226c0756db2036f537a39c4","permalink":"/blog/simulation-stimulation-part-3-implementation/","publishdate":"2019-04-12T00:00:00Z","relpermalink":"/blog/simulation-stimulation-part-3-implementation/","section":"blog","summary":"All the nitty gritty details left out from Parts 1 and 2","tags":["AFL","Simulations","Sport"],"title":"Simulation Stimulation Part 3: Implementation. ","type":"blog"},{"authors":null,"categories":["R"],"content":"\r\rThe Models: A Reminder\rPoisson Distributed Team Scores\rNormally Distributed team scores\rRankings model: tanh\r\r2019 Results\rPoisson model\rNormal model\rTanh model\r\rComparing the three models.\r\r\rIn part one of this series, I applied three different models to the 2018 AFL season. In this part, I apply these models to the 2019 AFL fixture to attempt to make some predictions about the standings at the end of the year.\nNow Ideally, I would have applied these models to the last 10 (or more) years of AFL data to see which one better predicts results for the upcoming year — but who has time for that — So we are just going to go ahead.\nThe Models: A Reminder\rPoisson Distributed Team Scores\rHere, each team’s score in every game is modeled as a random drawing from a Poisson distribution — i.e. \\(P(k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}\\), where k is the number of points scored, and \\(\\lambda\\) is calculated as\n\\(\\lambda_{home team} =\\) League Average points scored at home \\(\\times\\) home team attack strength at home \\(\\times\\) awayteam attack strength away\n\\(\\lambda_{away team} =\\) League Average points scored away \\(\\times\\) away team attack strength away \\(\\times\\) hometeam defense strength at home\n\rNormally Distributed team scores\rThis model assumes that team scores are normally distributed around \\(\\lambda\\) as defined above, with a standard deviation calculated as the pooled standard deviation of that teams ‘for’ scores standard deviation, and the opponents ‘against’ scores standard deviation: \\[Points_{teamA} \\sim \\mathcal{N}(\\mu=\\lambda,\\,\\sigma = \\sigma_p)\\,\\] where: \\[\\sigma_{p}=\\frac{\\sigma_{teamAfor} + \\sigma_{teamBagainst}}{2}\\]\n\rRankings model: tanh\rThis model simply relies on the ordinal data of last years final Ladder: Carlton, the wooden spoon winners (i.e. the last placeholders, out of 18 teams) get a ranking of 1, and Richmond, who finished on top of the table get a ranking of 18. Then, with this information, the probability of team A winning is modelled as follows:\n\\[P(A\\\u0026gt;wins)=\\frac{tanh(\\frac{a-b}{w} + d)+1}{2}\\] where,\nA = home team a = home team ranking b = away team ranking w = weighting parameter (the higher the number the less weight placed on the rankings) d = draw paramater, to allow for possibility of draws, calculated as so that \\(tanh(d) = -draw\\\u0026gt;rate\\)\n\r\r2019 Results\rPoisson model\rFinalsimtablepois.2019\r## Team MedianPos MeanPos BestPos WorstPos percentWon\r## 1 Richmond 1.0 1.9 1 5 60\r## 2 Melbourne 2.0 2.4 1 5 10\r## 3 Geelong 3.0 3.9 1 8 20\r## 4 West Coast 4.0 3.5 2 4 0\r## 5 Hawthorn 5.0 5.3 1 11 10\r## 6 Collingwood 6.0 5.8 3 9 0\r## 7 Greater Western Sydney 7.5 7.9 6 11 0\r## 8 North Melbourne 8.0 8.3 6 11 0\r## 9 Port Adelaide 9.0 8.7 6 12 0\r## 10 Sydney 9.5 9.5 6 12 0\r## 11 Adelaide 10.5 10.2 8 12 0\r## 12 Essendon 11.0 10.6 8 12 0\r## 13 Brisbane Lions 13.0 13.3 13 15 0\r## 14 St Kilda 14.0 14.4 13 16 0\r## 15 Fremantle 15.0 14.6 13 16 0\r## 16 Western Bulldogs 16.0 15.7 14 16 0\r## 17 Gold Coast 17.0 17.2 17 18 0\r## 18 Carlton 18.0 17.8 17 18 0\r## percentTop4 percentTop8 percentBottom4 percentLast Model\r## 1 90 100 0 0 pois\r## 2 90 100 0 0 pois\r## 3 70 100 0 0 pois\r## 4 100 100 0 0 pois\r## 5 20 90 0 0 pois\r## 6 30 80 0 0 pois\r## 7 0 70 0 0 pois\r## 8 0 50 0 0 pois\r## 9 0 40 0 0 pois\r## 10 0 30 0 0 pois\r## 11 0 30 0 0 pois\r## 12 0 10 0 0 pois\r## 13 0 0 10 0 pois\r## 14 0 0 40 0 pois\r## 15 0 0 60 0 pois\r## 16 0 0 90 0 pois\r## 17 0 0 100 20 pois\r## 18 0 0 100 80 pois\rpois2019graph\r\rNormal model\rFinalsimtablenorm.2019\r## Team MedianPos MeanPos BestPos WorstPos percentWon\r## 1 Richmond 1.0 1.9 1 5 60\r## 2 Melbourne 2.0 2.4 1 5 10\r## 3 Geelong 3.0 3.9 1 8 20\r## 4 West Coast 4.0 3.5 2 4 0\r## 5 Hawthorn 5.0 5.3 1 11 10\r## 6 Collingwood 6.0 5.8 3 9 0\r## 7 Greater Western Sydney 7.5 7.9 6 11 0\r## 8 North Melbourne 8.0 8.3 6 11 0\r## 9 Port Adelaide 9.0 8.7 6 12 0\r## 10 Sydney 9.5 9.5 6 12 0\r## 11 Adelaide 10.5 10.2 8 12 0\r## 12 Essendon 11.0 10.6 8 12 0\r## 13 Brisbane Lions 13.0 13.3 13 15 0\r## 14 St Kilda 14.0 14.4 13 16 0\r## 15 Fremantle 15.0 14.6 13 16 0\r## 16 Western Bulldogs 16.0 15.7 14 16 0\r## 17 Gold Coast 17.0 17.2 17 18 0\r## 18 Carlton 18.0 17.8 17 18 0\r## percentTop4 percentTop8 percentBottom4 percentLast Model\r## 1 90 100 0 0 norm\r## 2 90 100 0 0 norm\r## 3 70 100 0 0 norm\r## 4 100 100 0 0 norm\r## 5 20 90 0 0 norm\r## 6 30 80 0 0 norm\r## 7 0 70 0 0 norm\r## 8 0 50 0 0 norm\r## 9 0 40 0 0 norm\r## 10 0 30 0 0 norm\r## 11 0 30 0 0 norm\r## 12 0 10 0 0 norm\r## 13 0 0 10 0 norm\r## 14 0 0 40 0 norm\r## 15 0 0 60 0 norm\r## 16 0 0 90 0 norm\r## 17 0 0 100 20 norm\r## 18 0 0 100 80 norm\rnorm2019graph\r\rTanh model\rFinalsimlist.2019[[20]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Richm~ 2 3.3 1 10 30 70\r## 2 West ~ 3.5 4.3 2 7 0 60\r## 3 Hawth~ 3.5 4.9 1 13 40 70\r## 4 Geelo~ 5 7.3 2 13 0 20\r## 5 Melbo~ 6 6 1 12 10 40\r## 6 Sydney 6.5 7.4 3 16 0 20\r## 7 Colli~ 8 6.8 2 10 0 30\r## 8 Port ~ 9 8 2 14 0 30\r## 9 Great~ 9.5 9 3 15 0 20\r## 10 North~ 10 10.4 6 18 0 0\r## 11 Weste~ 10.5 10.7 5 17 0 0\r## 12 Frema~ 12 10.1 1 16 20 20\r## 13 Adela~ 12.5 12 4 18 0 10\r## 14 Essen~ 13.5 12.4 6 17 0 0\r## 15 Brisb~ 15.5 13 3 18 0 10\r## 16 Gold ~ 15.5 14.7 10 17 0 0\r## 17 St Ki~ 16.5 14.9 8 18 0 0\r## 18 Carlt~ 16.5 15.8 12 18 0 0\r## # ... with 4 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;, $Model \u0026lt;chr\u0026gt;\rtanh2019graph\r\r\rComparing the three models.\r#create table with different orders. ordercomparison.2018 \u0026lt;- data.frame(Team = factor(finalTable2018$Team),\rOrder2018 = 1:18,\rOrderNorm.2018 = match(finalTable2018$Team, Finalsimtablenorm.2018$Team),\rOrderPois.2018 = match(finalTable2018$Team, Finalsimtablepois.2018$Team),\rOrderTanh.2018 = match(finalTable2018$Team, Finalsimlist.2018[[20]]$Team)) ordercomparison.2018 %\u0026gt;% tibble()\r#Let\u0026#39;s now get the spearman\u0026#39;s correlation coefficients and show that in a correlatin matrix\rcormatrix.2018 \u0026lt;- cor(ordercomparison.2018[,2:5], use = \u0026quot;all.obs\u0026quot;, method = \u0026quot;spearman\u0026quot;)\rggcorrplot(cormatrix.2018, lab = TRUE)\r## create comparison graphs ##\r#combine two graphs##\rFinalsimtablenorm.2019$Model \u0026lt;- \u0026quot;norm\u0026quot;\rFinalsimtablepois.2019$Model \u0026lt;- \u0026quot;pois\u0026quot;\rFinalsimlist.2019[[20]]$Model \u0026lt;- \u0026quot;tanh\u0026quot;\rcomparisonSimTable.2019 \u0026lt;- rbind(Finalsimtablenorm.2019, Finalsimtablepois.2019, Finalsimlist.2019[[20]])\rcomparisonSimTable.2019$Model \u0026lt;- factor(comparisonSimTable.2019$Model)\r# create tidy data to compare a lot in one go\rcomparisonSimTable.2019.tidy \u0026lt;- gather(comparisonSimTable.2019, \u0026quot;Type\u0026quot;, \u0026quot;Percent\u0026quot;, 6:10)\rcomparisonSimTable.2019.tidy #create ordered factor to order graph\rcomparisonSimTable.2019.tidy$Team \u0026lt;- factor(comparisonSimTable.2019.tidy$Team, levels = Finalsimtablepois.2019$Team)\r#create ordered factor of \u0026#39;Type\u0026#39; to order facet\rcomparisonSimTable.2019.tidy$Type \u0026lt;- factor(comparisonSimTable.2019.tidy$Type, levels = c(\u0026quot;percentWon\u0026quot;, \u0026quot;percentTop4\u0026quot;, \u0026quot;percentTop8\u0026quot;,\r\u0026quot;percentBottom4\u0026quot;, \u0026quot;percentLast\u0026quot;))\r#draw graphs\rggplot(comparisonSimTable.2019, aes(x = Team, y = percentWon, fill = Model)) + geom_bar(stat = \u0026quot;identity\u0026quot;, position = \u0026#39;dodge\u0026#39;)\rggplot(comparisonSimTable.2019, aes(x = Team, y = percentTop8, fill = Model)) +\rgeom_bar(stat = \u0026quot;identity\u0026quot;, position = \u0026#39;dodge\u0026#39;)\rggplot(comparisonSimTable.2019.tidy, aes(x = Team, y = Percent, fill = Model)) + geom_bar(stat = \u0026quot;identity\u0026quot;, position = \u0026#39;dodge\u0026#39;) + theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 6)) +\rfacet_wrap(~Type, nrow = 1)\r\r","date":1554336000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"1e10784bfcadd030918674ee03c96d93","permalink":"/blog/simulation-stimulation-part-2-afl-season-2019/","publishdate":"2019-04-04T00:00:00Z","relpermalink":"/blog/simulation-stimulation-part-2-afl-season-2019/","section":"blog","summary":"Taking the modelling techniques from part 1 and simulating the future: the 2019 Australian Football League Season","tags":["AFL","Simulations","Sport"],"title":"Simulation Stimulation Part 2: AFL Season 2019","type":"blog"},{"authors":null,"categories":["R"],"content":"\r\rThe Models\rPoisson Distributed Team Scores\rNormally Distributed team scores\rRankings model: tanh\r\rThe Data\rResults\rPoisson model\rNormal model\rTanh model\r\rComparing the three models.\rGraphs\rPoisson Results Graph\rNorm Results Graph\rRankings Model Graph\rComparison Graphs\r\rConclusion\r\r\rRecently I was, as I am (unfortunately) rather wont to do, aimlessly watching YouTube videos when I came across these two videos by Numberphile. Here, the authors discuss their attempts at modelling and simulating seasons of the English Premier League.\nAs an avid AFL fan, and with the upcoming season fast approaching (edit, now well underway, carn the cats!), why not try to apply these methods to the AFL season. This post will be the first of a three part series doing so. In part 1, I will discuss the models and compare their results to the actual data from the 2018 season. Part 2 will apply the models to the 2019 season. And part 3 will go through the implementation details and show my code.\nThe Models\rPoisson Distributed Team Scores\rOkay, lets discuss the first model. Basically, each team’s score in every game is modeled as a random drawing from a Poisson distribution — i.e. \\(P(k) = e^{-\\lambda} \\frac{\\lambda^k}{k!}\\), where k is the number of points scored. A Poisson distribution is great for fast and simple modelling because it requires the estimation of only one parameter, \\(\\lambda\\). On the other hand, it isn’t exactly suited to the AFL context because the model assumes that all ‘events’ (in this case, scoring a point) occur independently. In AFL, a goal is worth 6 points, violating this assumption.\nIn any case, let’s press on with that in mind (we are not looking for a perfect model here). We calculate \\(\\lambda\\) for each game, based on the points scored for and against, at home and away, for each team in 2018:\n\\(\\lambda_{home team} =\\) League Average points scored at home \\(\\times\\) home team attack strength at home \\(\\times\\) away team defense strength away\n\\(\\lambda_{away team} =\\) League Average points scored away \\(\\times\\) away team attack strength away \\(\\times\\) hometeam defense strength at home\nAs you can see, the model takes into account the general home advantage as well as each particular team’s attack and defensive strengths at home and away. The strength parameters refereed to above are simply the averages for that particular team, relative to the league-wide average.\n\rNormally Distributed team scores\rThis model is a simple extension to the Poisson-based model above. However, it should be superior to it because:\nThere is no assumption of independence, and\rIt has an extra parameter to capture differences among teams in the variance of their defense and attack strength.\r\rHere, it is assumed that team scores are normally distributed around \\(\\lambda\\) as defined above, with a standard deviation calculated as the pooled standard deviation of that teams ‘for’ scores standard deviation, and the opponents ‘against’ scores standard deviation: \\[Points_{teamA} \\sim \\mathcal{N}(\\mu=\\lambda,\\,\\sigma = \\sigma_p)\\,\\] where: \\[\\sigma_{p}=\\frac{\\sigma_{teamA\\\u0026gt;for} + \\sigma_{teamB\\\u0026gt;against}}{2}\\]\n\rRankings model: tanh\rThis model simply relies on the ordinal data of last years final Ladder: Carlton, the wooden spoon winners (i.e. the last placeholders, out of 18 teams) get a ranking of 1, and Richmond, who finished on top of the table get a ranking of 18. Then, with this information, the probability of team A winning is modelled as follows:\n\\[P(A\\\u0026gt;wins)=\\frac{tanh(\\frac{a-b}{w} + d)+1}{2}\\] where:\nA = home team a = home team ranking b = away team ranking w = weighting parameter (the higher the number the less weight placed on the rankings) d = draw paramater, to allow for possibility of draws, calculated as so that \\(tanh(d) = -draw\\\u0026gt;rate\\)\nThe draw rate, \\(\\frac{7}{990} \\approx 0.007\\), was based on the likelihood of drawing a game over the past 5 years.\nThe probability of B winning is calculated in the same manner as above, except with \\(b-a\\).\nFinally, a draw is the remaining probability: \\(P(Draw)= 1 - P(A\\\u0026gt;wins) - P(B\\\u0026gt;wins)\\). This means that the draw rate will be greater for greater rankings differentials, and greater for greater weight parameters.\n\r\rThe Data\rpointstidy\r## # A tibble: 792 x 4\r## HorA Team FororAgainst Points\r## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 H Richmond For 121\r## 2 H Essendon For 99\r## 3 H St Kilda For 107\r## 4 H Port Adelaide For 110\r## 5 H Gold Coast For 55\r## 6 H Hawthorn For 101\r## 7 H Greater Western Sydney For 133\r## 8 H Melbourne For 94\r## 9 H West Coast For 86\r## 10 H Adelaide For 118\r## # ... with 782 more rows\rfixture2019\r## # A tibble: 198 x 2\r## Hometeam Awayteam ## \u0026lt;chr\u0026gt; \u0026lt;chr\u0026gt; ## 1 Carlton Richmond ## 2 Collingwood Geelong ## 3 Melbourne Port Adelaide ## 4 Adelaide Hawthorn ## 5 Brisbane Lions West Coast ## 6 Western Bulldogs Sydney ## 7 St Kilda Gold Coast ## 8 Greater Western Sydney Essendon ## 9 Fremantle North Melbourne\r## 10 Richmond Collingwood ## # ... with 188 more rows\r\rResults\rOk, so we are going to simulate 1000 seasons for each of these models (I wish I could do more, but my current computer lacks power, and my code is far from effiecient 😢 ). Here are the results from these simulations (for details on the code see part III of this series):\nPoisson model\rFinalsimtablepois.2018\r## Team MedianPos MeanPos BestPos WorstPos percentWon\r## 1 Melbourne 1.0 1.5 1 3 70\r## 2 Richmond 2.0 2.4 1 5 30\r## 3 Collingwood 3.0 3.1 2 5 0\r## 4 West Coast 4.5 4.4 2 6 0\r## 5 Geelong 5.0 4.6 2 7 0\r## 6 Hawthorn 5.5 5.2 4 6 0\r## 7 North Melbourne 7.0 7.6 6 11 0\r## 8 Port Adelaide 8.0 8.5 6 11 0\r## 9 Greater Western Sydney 8.5 9.0 7 12 0\r## 10 Sydney 10.0 10.2 9 12 0\r## 11 Adelaide 11.0 10.6 8 12 0\r## 12 Essendon 11.0 11.0 9 13 0\r## 13 Brisbane Lions 13.0 13.5 13 15 0\r## 14 Fremantle 14.0 13.5 12 14 0\r## 15 Western Bulldogs 15.0 15.0 14 16 0\r## 16 St Kilda 16.0 16.0 15 17 0\r## 17 Carlton 17.5 17.4 16 18 0\r## 18 Gold Coast 17.5 17.5 17 18 0\r## percentTop4 percentTop8 percentBottom4 percentLast\r## 1 100 100 0 0\r## 2 90 100 0 0\r## 3 90 100 0 0\r## 4 50 100 0 0\r## 5 40 100 0 0\r## 6 30 100 0 0\r## 7 0 80 0 0\r## 8 0 60 0 0\r## 9 0 50 0 0\r## 10 0 0 0 0\r## 11 0 10 0 0\r## 12 0 0 0 0\r## 13 0 0 10 0\r## 14 0 0 0 0\r## 15 0 0 90 0\r## 16 0 0 100 0\r## 17 0 0 100 50\r## 18 0 0 100 50\r\rNormal model\rFinalsimtablenorm.2018\r## Team MedianPos MeanPos BestPos WorstPos percentWon\r## 1 Melbourne 1.0 1.5 1 3 70\r## 2 Richmond 2.0 2.4 1 5 30\r## 3 Collingwood 3.0 3.1 2 5 0\r## 4 West Coast 4.5 4.4 2 6 0\r## 5 Geelong 5.0 4.6 2 7 0\r## 6 Hawthorn 5.5 5.2 4 6 0\r## 7 North Melbourne 7.0 7.6 6 11 0\r## 8 Port Adelaide 8.0 8.5 6 11 0\r## 9 Greater Western Sydney 8.5 9.0 7 12 0\r## 10 Sydney 10.0 10.2 9 12 0\r## 11 Adelaide 11.0 10.6 8 12 0\r## 12 Essendon 11.0 11.0 9 13 0\r## 13 Brisbane Lions 13.0 13.5 13 15 0\r## 14 Fremantle 14.0 13.5 12 14 0\r## 15 Western Bulldogs 15.0 15.0 14 16 0\r## 16 St Kilda 16.0 16.0 15 17 0\r## 17 Carlton 17.5 17.4 16 18 0\r## 18 Gold Coast 17.5 17.5 17 18 0\r## percentTop4 percentTop8 percentBottom4 percentLast\r## 1 100 100 0 0\r## 2 90 100 0 0\r## 3 90 100 0 0\r## 4 50 100 0 0\r## 5 40 100 0 0\r## 6 30 100 0 0\r## 7 0 80 0 0\r## 8 0 60 0 0\r## 9 0 50 0 0\r## 10 0 0 0 0\r## 11 0 10 0 0\r## 12 0 0 0 0\r## 13 0 0 10 0\r## 14 0 0 0 0\r## 15 0 0 90 0\r## 16 0 0 100 0\r## 17 0 0 100 50\r## 18 0 0 100 50\r\rTanh model\rHere, we will inspect our restuls for our model wih various different weighting paramaters, w, before taking the best of these for use in our further analyses.\nFinalsimlist.2018[[1]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Richm~ 1 1.1 1 2 90 100\r## 2 West ~ 2 1.9 1 2 10 100\r## 3 Hawth~ 3 3.2 3 4 0 100\r## 4 Colli~ 4 4 3 5 0 80\r## 5 Melbo~ 5 4.8 4 5 0 20\r## 6 Great~ 6.5 6.5 6 7 0 0\r## 7 Sydney 6.5 6.5 6 7 0 0\r## 8 North~ 8 8.1 8 9 0 0\r## 9 Port ~ 9 8.9 8 9 0 0\r## 10 Geelo~ 10 10 10 10 0 0\r## 11 Essen~ 11 11 11 11 0 0\r## 12 Adela~ 12 12.1 12 13 0 0\r## 13 Weste~ 13 13 12 14 0 0\r## 14 Frema~ 14 13.9 13 14 0 0\r## 15 Brisb~ 15 15.2 15 16 0 0\r## 16 St Ki~ 16 16 15 18 0 0\r## 17 Gold ~ 17 17.3 16 18 0 0\r## 18 Carlt~ 17.5 17.5 17 18 0 0\r## # ... with 3 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;\rFinalsimlist.2018[[20]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Hawth~ 2 3 1 11 30 80\r## 2 West ~ 3 3.7 1 11 20 80\r## 3 Richm~ 3 3.8 1 9 10 80\r## 4 Colli~ 4 4.1 1 8 20 60\r## 5 Melbo~ 5 5.4 1 11 20 40\r## 6 Great~ 6.5 7.8 4 16 0 10\r## 7 Geelo~ 8 8.7 4 13 0 10\r## 8 North~ 8 9.3 6 15 0 0\r## 9 Sydney 9 8.1 2 17 0 30\r## 10 Port ~ 9 9.4 5 13 0 0\r## 11 Essen~ 10 10.1 5 15 0 0\r## 12 Adela~ 12 11.8 4 16 0 10\r## 13 Frema~ 13 12.8 7 18 0 0\r## 14 Weste~ 14 13.3 6 17 0 0\r## 15 Carlt~ 14.5 14.5 9 18 0 0\r## 16 Brisb~ 15.5 15.1 11 18 0 0\r## 17 St Ki~ 16 14.2 7 18 0 0\r## 18 Gold ~ 16.5 15.9 10 18 0 0\r## # ... with 3 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;\rFinalsimlist.2018[[50]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 West ~ 3 3.8 1 9 10 80\r## 2 Richm~ 5 6.4 1 14 10 50\r## 3 Hawth~ 5.5 5.8 2 12 0 40\r## 4 Colli~ 6.5 6.7 1 13 30 30\r## 5 Sydney 7 7.3 1 15 10 20\r## 6 Great~ 8 8.3 1 16 10 20\r## 7 Port ~ 8.5 8.8 1 18 10 40\r## 8 Melbo~ 8.5 9.4 6 15 0 0\r## 9 Essen~ 10 9.8 1 17 10 20\r## 10 Geelo~ 11 9.9 2 17 0 20\r## 11 St Ki~ 11 11.5 5 17 0 0\r## 12 Weste~ 11.5 10.8 2 18 0 10\r## 13 North~ 11.5 11.2 4 18 0 10\r## 14 Brisb~ 13 11.2 1 17 10 20\r## 15 Carlt~ 13 13.3 9 18 0 0\r## 16 Adela~ 13.5 12.7 3 18 0 10\r## 17 Frema~ 14 10.9 2 18 0 30\r## 18 Gold ~ 14 13.2 5 18 0 0\r## # ... with 3 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;\rFinalsimlist.2018[[100]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 Melbo~ 6 7 1 15 10 30\r## 2 West ~ 6 8 2 16 0 30\r## 3 Carlt~ 6 8.3 1 18 10 10\r## 4 Richm~ 7 8.1 2 16 0 20\r## 5 Great~ 8 8.3 3 14 0 10\r## 6 Sydney 8 9.4 3 16 0 20\r## 7 Hawth~ 8.5 8.7 2 15 0 20\r## 8 Colli~ 9 8.5 1 16 10 40\r## 9 Frema~ 9 8.6 4 18 0 30\r## 10 Port ~ 9 9 1 18 10 40\r## 11 North~ 9.5 9.3 1 18 10 30\r## 12 Adela~ 9.5 9.8 1 17 20 20\r## 13 Geelo~ 10 9.8 2 17 0 30\r## 14 Weste~ 10.5 10.1 1 16 10 10\r## 15 Brisb~ 11.5 10.1 1 16 10 20\r## 16 Essen~ 12.5 10.8 3 18 0 20\r## 17 Gold ~ 15 12.4 1 18 10 10\r## 18 St Ki~ 16 14.8 4 18 0 10\r## # ... with 3 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;\rFinalsimlist.2018[[500]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 West ~ 4.5 5.3 1 16 30 50\r## 2 Melbo~ 5 6.1 2 11 0 50\r## 3 Colli~ 7 8.3 3 15 0 20\r## 4 Adela~ 7 8.9 2 18 0 20\r## 5 Hawth~ 8 7.3 1 14 20 30\r## 6 North~ 9.5 9 1 18 20 30\r## 7 Essen~ 9.5 9.1 2 17 0 20\r## 8 Richm~ 9.5 9.1 1 17 20 20\r## 9 Sydney 10 8.5 2 14 0 20\r## 10 Great~ 10 9.8 1 18 10 20\r## 11 Geelo~ 10.5 10.4 3 17 0 10\r## 12 St Ki~ 11 10.9 2 17 0 20\r## 13 Carlt~ 11.5 11.9 4 18 0 10\r## 14 Gold ~ 12 10.3 2 16 0 30\r## 15 Weste~ 12 10.5 2 18 0 20\r## 16 Frema~ 12 11.4 4 17 0 10\r## 17 Port ~ 12.5 11.4 3 18 0 10\r## 18 Brisb~ 13.5 12.8 3 18 0 10\r## # ... with 3 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;\rFinalsimlist.2018[[1000]] %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $MedianPos $MeanPos $BestPos $WorstPos $percentWon $percentTop4\r## \u0026lt;fct\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt; \u0026lt;dbl\u0026gt;\r## 1 West ~ 4 4.8 1 11 10 50\r## 2 Colli~ 5.5 6.7 2 16 0 30\r## 3 Port ~ 7 8.9 3 16 0 20\r## 4 Adela~ 8 8.5 2 18 0 40\r## 5 St Ki~ 8 8.6 1 18 10 40\r## 6 Hawth~ 8.5 8.4 1 15 10 30\r## 7 Richm~ 8.5 8.8 1 17 10 20\r## 8 North~ 8.5 9.8 4 18 0 10\r## 9 Sydney 9 8.9 1 15 10 20\r## 10 Frema~ 10 9.8 3 18 0 20\r## 11 Brisb~ 10 11.1 5 17 0 0\r## 12 Gold ~ 10.5 9.6 2 17 0 20\r## 13 Weste~ 10.5 9.6 1 18 20 30\r## 14 Carlt~ 11.5 11 5 17 0 0\r## 15 Geelo~ 13 11.4 1 18 10 20\r## 16 Melbo~ 13 11.6 2 18 0 10\r## 17 Great~ 13.5 12 4 18 0 20\r## 18 Essen~ 14 11.5 1 18 20 20\r## # ... with 3 more variables: $percentTop8 \u0026lt;dbl\u0026gt;, $percentBottom4 \u0026lt;dbl\u0026gt;,\r## # $percentLast \u0026lt;dbl\u0026gt;\rWe are going to have to play it by ear a little, and use our intiution to see which of these models appears to be the best for us going forward. Particularly, because we have used the same data that trained the model to test the model, and we want to avoid overfitting. So, we will pick the best model based on (1) it’s spearman coefficient with last year’s ladder and (2) its ability to have varation in our simulations (the same team doesn’t simply win each year).\n##Create order comparisons table## for (w in c(1, 20, 50, 100, 500, 1000)){\rname \u0026lt;- paste0(\u0026quot;Ordertanh.\u0026quot;, w)\rassign(name, match(finalTable2018$Team, Finalsimlist.2018[[w]]$Team))\r}\rordercomparison.2018.tanh \u0026lt;- data.frame(Team = factor(finalTable2018$Team),\rOrder2018 = 1:18,\rOrdertanh.1,\rOrdertanh.20,\rOrdertanh.50,\rOrdertanh.100, Ordertanh.500,\rOrdertanh.1000)\rordercomparison.2018.tanh\r## Team Order2018 Ordertanh.1 Ordertanh.20 Ordertanh.50\r## 1 Richmond 1 1 3 2\r## 2 West Coast 2 2 2 1\r## 3 Collingwood 3 4 4 4\r## 4 Hawthorn 4 3 1 3\r## 5 Melbourne 5 5 5 8\r## 6 Sydney 6 7 9 5\r## 7 Greater Western Sydney 7 6 6 6\r## 8 Geelong 8 10 7 10\r## 9 North Melbourne 9 8 8 13\r## 10 Port Adelaide 10 9 10 7\r## 11 Essendon 11 11 11 9\r## 12 Adelaide 12 12 12 16\r## 13 Western Bulldogs 13 13 14 12\r## 14 Fremantle 14 14 13 17\r## 15 Brisbane Lions 15 15 16 14\r## 16 St Kilda 16 16 17 11\r## 17 Gold Coast 17 17 18 18\r## 18 Carlton 18 18 15 15\r## Ordertanh.100 Ordertanh.500 Ordertanh.1000\r## 1 4 8 7\r## 2 2 1 1\r## 3 8 3 2\r## 4 7 5 6\r## 5 1 2 16\r## 6 6 9 9\r## 7 5 10 17\r## 8 13 11 15\r## 9 11 6 8\r## 10 10 17 3\r## 11 16 7 18\r## 12 12 4 4\r## 13 14 15 13\r## 14 9 16 10\r## 15 15 18 11\r## 16 18 12 5\r## 17 17 14 12\r## 18 3 13 14\r## get correlation matrix##\rcormatrix.weights \u0026lt;- cor(ordercomparison.2018.tanh[,2:ncol(ordercomparison.2018.tanh)], use = \u0026quot;all.obs\u0026quot;, method = \u0026quot;spearman\u0026quot;)\r# lets find a nice way to graphically look at that\rggcorrplot(cormatrix.weights, lab = TRUE, show.legend = TRUE)\rSo on this basis, we will choose a weight parameter value of 20 as, on inspection of simulation results, it allows for enough randomness in the system to allow teams in the top 8 to have some reasonable likelihood of winning the cup, but (all but) denies the chance for the really useless teams for winning. Let’s be honest, carlton’s chance of winning the premiership is less than 1 in a million.\n\r\rComparing the three models.\r#create table with different orders. ordercomparison.2018 \u0026lt;- data.frame(Team = factor(finalTable2018$Team),\rOrder2018 = 1:18,\rOrderNorm.2018 = match(finalTable2018$Team, Finalsimtablenorm.2018$Team),\rOrderPois.2018 = match(finalTable2018$Team, Finalsimtablepois.2018$Team),\rOrderTanh.2018 = match(finalTable2018$Team, Finalsimlist.2018[[20]]$Team)) ordercomparison.2018 %\u0026gt;% tibble()\r## # A tibble: 18 x 1\r## .$Team $Order2018 $OrderNorm.2018 $OrderPois.2018 $OrderTanh.2018\r## \u0026lt;fct\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt; \u0026lt;int\u0026gt;\r## 1 Richmond 1 2 2 3\r## 2 West Coast 2 4 4 2\r## 3 Collingwood 3 3 3 4\r## 4 Hawthorn 4 6 6 1\r## 5 Melbourne 5 1 1 5\r## 6 Sydney 6 10 10 9\r## 7 Greater West~ 7 9 9 6\r## 8 Geelong 8 5 5 7\r## 9 North Melbou~ 9 7 7 8\r## 10 Port Adelaide 10 8 8 10\r## 11 Essendon 11 12 12 11\r## 12 Adelaide 12 11 11 12\r## 13 Western Bull~ 13 15 15 14\r## 14 Fremantle 14 14 14 13\r## 15 Brisbane Lio~ 15 13 13 16\r## 16 St Kilda 16 16 16 17\r## 17 Gold Coast 17 18 18 18\r## 18 Carlton 18 17 17 15\r#Let\u0026#39;s now get the spearman\u0026#39;s correlation coefficients and show that in a correlatin matrix\rcormatrix.2018 \u0026lt;- cor(ordercomparison.2018[,2:5], use = \u0026quot;all.obs\u0026quot;, method = \u0026quot;spearman\u0026quot;)\rggcorrplot(cormatrix.2018, lab = TRUE)\r\rGraphs\rSO now lets have a look at this data graphically.\nPoisson Results Graph\r#graphing and comparing the two models. #create mode function\rMode \u0026lt;- function(x) {\rux \u0026lt;- unique(x)\rux[which.max(tabulate(match(x, ux)))]\r}\r###GRAPH FOR POISSON MODEL###\r#transpose data to tidy form for use in ggplot\rSimResultspois.2018$simNumber \u0026lt;- sprintf(\u0026quot;sim%d\u0026quot;, seq(1:Nsim.pois.2018))\rSimResultspois.2018.tidy \u0026lt;- gather(SimResultspois.2018,\u0026quot;Team\u0026quot;, \u0026quot;Position\u0026quot;, -simNumber)\r#create ordered factor to order graph\rSimResultspois.2018.tidy$Team \u0026lt;- factor(SimResultspois.2018.tidy$Team, levels = Finalsimtablepois.2018$Team)\r#create graph ggplot(SimResultspois.2018.tidy, aes(x = Team, y = Position)) + geom_violin(aes(fill = Team, col = Team), show.legend = FALSE,\rtrim = TRUE, kernel = \u0026quot;gaussian\u0026quot;, adjust = 3) + stat_summary(fun.y=median, geom=\u0026quot;point\u0026quot;,color=\u0026quot;black\u0026quot;, aes(shape = \u0026quot;Median\u0026quot;, size=\u0026quot;Median\u0026quot;)) +\rstat_summary(fun.y=mean, geom =\u0026quot;point\u0026quot;, color = \u0026quot;black\u0026quot;,\raes(shape = \u0026quot;Mean\u0026quot;, size = \u0026quot;Mean\u0026quot;)) +\rstat_summary(fun.y=Mode, geom =\u0026quot;point\u0026quot;, color = \u0026quot;black\u0026quot;,\raes(shape = \u0026quot;Mode\u0026quot;, size = \u0026quot;Mode\u0026quot;)) +\rcoord_flip(ylim = c(1,18)) +\rscale_y_continuous(breaks = 1:18, labels = 1:18) +\rtheme(panel.grid.major.x = element_blank(),\rpanel.grid.minor.x = element_blank()) +\rscale_shape_manual(name = \u0026quot;\u0026quot;, labels = c(\u0026quot;Median\u0026quot;,\u0026quot;Mean\u0026quot;, \u0026quot;Mode\u0026quot;),\rvalues = c(0, 2, 19)) +\rscale_size_manual(name = \u0026quot;\u0026quot;, labels = c(\u0026quot;Median\u0026quot;, \u0026quot;Mean\u0026quot;, \u0026quot;Mode\u0026quot;), values = c(4, 3, 1)) +\rguides(shape = \u0026quot;legend\u0026quot;)\r\rNorm Results Graph\r###GRAPH FOR NORM MODEL###\r#transpose data to tidy form for use in ggplot\rSimResultsnorm.2018$simNumber \u0026lt;- sprintf(\u0026quot;sim%d\u0026quot;, seq(1:Nsim.norm.2018))\rSimResultsnorm.2018.tidy \u0026lt;- gather(SimResultsnorm.2018,\u0026quot;Team\u0026quot;, \u0026quot;Position\u0026quot;, -simNumber)\r#create ordered factor to order graph\rSimResultsnorm.2018.tidy$Team \u0026lt;- factor(SimResultsnorm.2018.tidy$Team, levels = Finalsimtablenorm.2018$Team)\r#create graph ggplot(SimResultsnorm.2018.tidy, aes(x = Team, y = Position)) + geom_violin(aes(fill = Team, col = Team), show.legend = FALSE,\rtrim = TRUE, kernel = \u0026quot;gaussian\u0026quot;, adjust = 3) + stat_summary(fun.y=median, geom=\u0026quot;point\u0026quot;,color=\u0026quot;black\u0026quot;, aes(shape = \u0026quot;Median\u0026quot;, size=\u0026quot;Median\u0026quot;)) +\rstat_summary(fun.y=mean, geom =\u0026quot;point\u0026quot;, color = \u0026quot;black\u0026quot;,\raes(shape = \u0026quot;Mean\u0026quot;, size = \u0026quot;Mean\u0026quot;)) +\rstat_summary(fun.y=Mode, geom =\u0026quot;point\u0026quot;, color = \u0026quot;black\u0026quot;,\raes(shape = \u0026quot;Mode\u0026quot;, size = \u0026quot;Mode\u0026quot;)) +\rcoord_flip(ylim = c(1,18)) +\rscale_y_continuous(breaks = 1:18, labels = 1:18) +\rtheme(panel.grid.major.x = element_blank(),\rpanel.grid.minor.x = element_blank()) +\rscale_shape_manual(name = \u0026quot;\u0026quot;, labels = c(\u0026quot;Median\u0026quot;,\u0026quot;Mean\u0026quot;, \u0026quot;Mode\u0026quot;),\rvalues = c(0, 2, 19)) +\rscale_size_manual(name = \u0026quot;\u0026quot;, labels = c(\u0026quot;Median\u0026quot;, \u0026quot;Mean\u0026quot;, \u0026quot;Mode\u0026quot;), values = c(4, 3, 1)) +\rguides(shape = \u0026quot;legend\u0026quot;)\r\rRankings Model Graph\r###Graph for Rankings Model###\r#transpose data to tidy form for use in ggplot\rSimResultstanh.2018 \u0026lt;- SimResultsList.2018[[20]] %\u0026gt;% as.data.frame()\rSimResultstanh.2018$simNumber \u0026lt;- sprintf(\u0026quot;sim%d\u0026quot;, seq(1:Nsim.tanh.2018))\rSimResultstanh.2018.tidy \u0026lt;- gather(SimResultstanh.2018,\u0026quot;Team\u0026quot;, \u0026quot;Position\u0026quot;, -simNumber)\r#create ordered factor to order graph\rSimResultstanh.2018.tidy$Team \u0026lt;- factor(SimResultstanh.2018.tidy$Team, levels = Finalsimlist.2018[[w]]$Team)\rggplot(SimResultsnorm.2018.tidy, aes(x = Team, y = Position)) + geom_violin(aes(fill = Team, col = Team), show.legend = FALSE,\rtrim = TRUE, kernel = \u0026quot;gaussian\u0026quot;, adjust = 3) + stat_summary(fun.y=median, geom=\u0026quot;point\u0026quot;,color=\u0026quot;black\u0026quot;, aes(shape = \u0026quot;Median\u0026quot;, size=\u0026quot;Median\u0026quot;)) +\rstat_summary(fun.y=mean, geom =\u0026quot;point\u0026quot;, color = \u0026quot;black\u0026quot;,\raes(shape = \u0026quot;Mean\u0026quot;, size = \u0026quot;Mean\u0026quot;)) +\rstat_summary(fun.y=Mode, geom =\u0026quot;point\u0026quot;, color = \u0026quot;black\u0026quot;,\raes(shape = \u0026quot;Mode\u0026quot;, size = \u0026quot;Mode\u0026quot;)) +\rcoord_flip(ylim = c(1,18)) +\rscale_y_continuous(breaks = 1:18, labels = 1:18) +\rtheme(panel.grid.major.x = element_blank(),\rpanel.grid.minor.x = element_blank()) +\rscale_shape_manual(name = \u0026quot;\u0026quot;, labels = c(\u0026quot;Median\u0026quot;,\u0026quot;Mean\u0026quot;, \u0026quot;Mode\u0026quot;),\rvalues = c(0, 2, 19)) +\rscale_size_manual(name = \u0026quot;\u0026quot;, labels = c(\u0026quot;Median\u0026quot;, \u0026quot;Mean\u0026quot;, \u0026quot;Mode\u0026quot;), values = c(4, 3, 1)) +\rguides(shape = \u0026quot;legend\u0026quot;)\r\rComparison Graphs\r## create comparison graphs ##\r#combine two graphs##\rFinalsimtablenorm.2018$Model \u0026lt;- \u0026quot;norm\u0026quot;\rFinalsimtablepois.2018$Model \u0026lt;- \u0026quot;pois\u0026quot;\rFinalsimlist.2018[[20]]$Model \u0026lt;- \u0026quot;tanh\u0026quot;\rcomparisonSimTable.2018 \u0026lt;- rbind(Finalsimtablenorm.2018, Finalsimtablepois.2018, Finalsimlist.2018[[20]])\rcomparisonSimTable.2018$Model \u0026lt;- factor(comparisonSimTable.2018$Model)\r# create tidy data to compare a lot in one go\rcomparisonSimTable.2018.tidy \u0026lt;- gather(comparisonSimTable.2018, \u0026quot;Type\u0026quot;, \u0026quot;Percent\u0026quot;, 6:10)\r#create ordered factor to order graph\rcomparisonSimTable.2018.tidy$Team \u0026lt;- factor(comparisonSimTable.2018.tidy$Team, levels = Finalsimtablepois.2018$Team)\r#create ordered factor of \u0026#39;Type\u0026#39; to order facet\rcomparisonSimTable.2018.tidy$Type \u0026lt;- factor(comparisonSimTable.2018.tidy$Type, levels = c(\u0026quot;percentWon\u0026quot;, \u0026quot;percentTop4\u0026quot;, \u0026quot;percentTop8\u0026quot;,\r\u0026quot;percentBottom4\u0026quot;, \u0026quot;percentLast\u0026quot;))\r#draw graphs\rggplot(comparisonSimTable.2018, aes(x = Team, y = percentWon, fill = Model)) + geom_bar(stat = \u0026quot;identity\u0026quot;, position = \u0026#39;dodge\u0026#39;) +\rtheme(axis.text.x=element_text(angle = 45, hjust = 1))\rggplot(comparisonSimTable.2018, aes(x = Team, y = percentTop8, fill = Model)) +\rgeom_bar(stat = \u0026quot;identity\u0026quot;, position = \u0026#39;dodge\u0026#39;) +\rtheme(axis.text.x=element_text(angle = 45, hjust = 1))\rggplot(comparisonSimTable.2018.tidy, aes(x = Team, y = Percent, fill = Model)) + geom_bar(stat = \u0026quot;identity\u0026quot;, position = \u0026#39;dodge\u0026#39;) + theme(axis.text.x = element_text(angle = 90, hjust = 1, size = 6)) +\rfacet_wrap(~Type, nrow = 3)\r\r\rConclusion\rUpon analysis of this data, it seems to me that the ‘normal’ model is the best of the bunch. It allows for the variability that we know, from a cursory knowledge of the sport, exists from year to year, while still preserving relevant information from last year.\nIn Part II of this series we apply this data to the upcoming season — to predict the all but certain future that that the Cats will once again be premier! (I wish)\nSee you then.\n\r","date":1553904000,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554269544,"objectID":"7e0da3dc3e7226069ffdfdf65872b26e","permalink":"/blog/simulation-stimulation-afl-season-2018/","publishdate":"2019-03-30T00:00:00Z","relpermalink":"/blog/simulation-stimulation-afl-season-2018/","section":"blog","summary":"Attempts at modelling and simulating the 2018 Australian Football League Season","tags":["AFL","Sport","Simulations"],"title":"Simulation Stimulation: AFL Season 2018","type":"blog"},{"authors":null,"categories":null,"content":" In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;\n","date":1536415200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"6a451186c775f5f0adb3a0416d0cb711","permalink":"/tutorial/example/","publishdate":"2018-09-09T00:00:00+10:00","relpermalink":"/tutorial/example/","section":"tutorial","summary":"In this tutorial, I\u0026rsquo;ll share my top 10 tips for getting started with Academic:\nTip 1 \u0026hellip;\nTip 2 \u0026hellip;","tags":null,"title":"Example Page","type":"docs"},{"authors":null,"categories":null,"content":"","date":1461679200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"d1311ddf745551c9e117aa4bb7e28516","permalink":"/project/external-project/","publishdate":"2016-04-27T00:00:00+10:00","relpermalink":"/project/external-project/","section":"project","summary":"An example of linking directly to an external project website using `external_link`.","tags":["Demo"],"title":"External Project","type":"project"},{"authors":null,"categories":null,"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum. Sed ac faucibus dolor, scelerisque sollicitudin nisi. Cras purus urna, suscipit quis sapien eu, pulvinar tempor diam. Quisque risus orci, mollis id ante sit amet, gravida egestas nisl. Sed ac tempus magna. Proin in dui enim. Donec condimentum, sem id dapibus fringilla, tellus enim condimentum arcu, nec volutpat est felis vel metus. Vestibulum sit amet erat at nulla eleifend gravida.\nNullam vel molestie justo. Curabitur vitae efficitur leo. In hac habitasse platea dictumst. Sed pulvinar mauris dui, eget varius purus congue ac. Nulla euismod, lorem vel elementum dapibus, nunc justo porta mi, sed tempus est est vel tellus. Nam et enim eleifend, laoreet sem sit amet, elementum sem. Morbi ut leo congue, maximus velit ut, finibus arcu. In et libero cursus, rutrum risus non, molestie leo. Nullam congue quam et volutpat malesuada. Sed risus tortor, pulvinar et dictum nec, sodales non mi. Phasellus lacinia commodo laoreet. Nam mollis, erat in feugiat consectetur, purus eros egestas tellus, in auctor urna odio at nibh. Mauris imperdiet nisi ac magna convallis, at rhoncus ligula cursus.\nCras aliquam rhoncus ipsum, in hendrerit nunc mattis vitae. Duis vitae efficitur metus, ac tempus leo. Cras nec fringilla lacus. Quisque sit amet risus at ipsum pharetra commodo. Sed aliquam mauris at consequat eleifend. Praesent porta, augue sed viverra bibendum, neque ante euismod ante, in vehicula justo lorem ac eros. Suspendisse augue libero, venenatis eget tincidunt ut, malesuada at lorem. Donec vitae bibendum arcu. Aenean maximus nulla non pretium iaculis. Quisque imperdiet, nulla in pulvinar aliquet, velit quam ultrices quam, sit amet fringilla leo sem vel nunc. Mauris in lacinia lacus.\nSuspendisse a tincidunt lacus. Curabitur at urna sagittis, dictum ante sit amet, euismod magna. Sed rutrum massa id tortor commodo, vitae elementum turpis tempus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Aenean purus turpis, venenatis a ullamcorper nec, tincidunt et massa. Integer posuere quam rutrum arcu vehicula imperdiet. Mauris ullamcorper quam vitae purus congue, quis euismod magna eleifend. Vestibulum semper vel augue eget tincidunt. Fusce eget justo sodales, dapibus odio eu, ultrices lorem. Duis condimentum lorem id eros commodo, in facilisis mauris scelerisque. Morbi sed auctor leo. Nullam volutpat a lacus quis pharetra. Nulla congue rutrum magna a ornare.\nAliquam in turpis accumsan, malesuada nibh ut, hendrerit justo. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Quisque sed erat nec justo posuere suscipit. Donec ut efficitur arcu, in malesuada neque. Nunc dignissim nisl massa, id vulputate nunc pretium nec. Quisque eget urna in risus suscipit ultricies. Pellentesque odio odio, tincidunt in eleifend sed, posuere a diam. Nam gravida nisl convallis semper elementum. Morbi vitae felis faucibus, vulputate orci placerat, aliquet nisi. Aliquam erat volutpat. Maecenas sagittis pulvinar purus, sed porta quam laoreet at.\n","date":1461679200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"8f66d660a9a2edc2d08e68cc30f701f7","permalink":"/project/internal-project/","publishdate":"2016-04-27T00:00:00+10:00","relpermalink":"/project/internal-project/","section":"project","summary":"An example of using the in-built project page.","tags":["Deep Learning"],"title":"Internal Project","type":"project"},{"authors":["GA Cushen"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1441029600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"d77fa4a74076ffcd7ca6c21cfc27a4b2","permalink":"/publication/person-re-id/","publishdate":"2015-09-01T00:00:00+10:00","relpermalink":"/publication/person-re-id/","section":"publication","summary":"Person re-identification is a critical security task for recognizing a person across spatially disjoint sensors. Previous work can be computationally intensive and is mainly based on low-level cues extracted from RGB data and implemented on a PC for a fixed sensor network (such as traditional CCTV). We present a practical and efficient framework for mobile devices (such as smart phones and robots) where high-level semantic soft biometrics are extracted from RGB and depth data. By combining these cues, our approach attempts to provide robustness to noise, illumination, and minor variations in clothing. This mobile approach may be particularly useful for the identification of persons in areas ill-served by fixed sensors or for tasks where the sensor position and direction need to dynamically adapt to a target. Results on the BIWI dataset are preliminary but encouraging. Further evaluation and demonstration of the system will be available on our website.","tags":[],"title":"A Person Re-Identification System For Mobile Devices","type":"publication"},{"authors":["GA Cushen","MS Nixon"],"categories":null,"content":"More detail can easily be written here using Markdown and $\\rm \\LaTeX$ math code.\n","date":1372600800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"2b4d919e3cf73dfcd0063c88fe01cb00","permalink":"/publication/clothing-search/","publishdate":"2013-07-01T00:00:00+10:00","relpermalink":"/publication/clothing-search/","section":"publication","summary":"A mobile visual clothing search system is presented whereby a smart phone user can either choose a social networking image or capture a new photo of a person wearing clothing of interest and search for similar clothing in a large cloud-based ecommerce database. The phone's GPS location is used to re-rank results by retail store location, to inform the user of local stores where similar clothing items can be tried on.","tags":[],"title":"Mobile visual clothing search","type":"publication"},{"authors":null,"categories":null,"content":" Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$\nBlock math:\n$$ f\\left( x \\right) = \\;\\frac{{2\\left( {x + 4} \\right)\\left( {x - 4} \\right)}}{{\\left( {x + 4} \\right)\\left( {x + 1} \\right)}} $$\nFragments Make content appear incrementally\n{{% fragment %}} One {{% /fragment %}} {{% fragment %}} **Two** {{% /fragment %}} {{% fragment %}} Three {{% /fragment %}}  Press Space to play!\nOne  Two  Three \nA fragment can accept two optional parameters:\n class: use a custom style (requires definition in custom CSS) weight: sets the order in which a fragment appears  Speaker Notes Add speaker notes to your presentation\n{{% speaker_note %}} - Only the speaker can read these notes - Press `S` key to view {{% /speaker_note %}}  Press the S key to view the speaker notes!\n Only the speaker can read these notes Press S key to view   Themes  black: Black background, white text, blue links (default) white: White background, black text, blue links league: Gray background, white text, blue links beige: Beige background, dark text, brown links sky: Blue background, thin dark text, blue links   night: Black background, thick white text, orange links serif: Cappuccino background, gray text, brown links simple: White background, black text, blue links solarized: Cream-colored background, dark green text, blue links  Custom Slide Customize the slide style and background\n{{\u0026lt; slide background-image=\u0026quot;/img/boards.jpg\u0026quot; \u0026gt;}} {{\u0026lt; slide background-color=\u0026quot;#0000FF\u0026quot; \u0026gt;}} {{\u0026lt; slide class=\u0026quot;my-style\u0026quot; \u0026gt;}}  Custom CSS Example Let\u0026rsquo;s make headers navy colored.\nCreate assets/css/reveal_custom.css with:\n.reveal section h1, .reveal section h2, .reveal section h3 { color: navy; }  Questions? Ask\nDocumentation\n","date":-62135596800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1554039218,"objectID":"c2915ec5da95791851caafdcba9664af","permalink":"/slides/example-slides/","publishdate":"0001-01-01T00:00:00Z","relpermalink":"/slides/example-slides/","section":"slides","summary":"Welcome to Slides Academic\nFeatures  Efficiently write slides in Markdown 3-in-1: Create, Present, and Publish your slides Supports speaker notes Mobile friendly slides  Controls  Next: Right Arrow or Space Previous: Left Arrow Start: Home Finish: End Overview: Esc Speaker notes: S Fullscreen: F Zoom: Alt + Click PDF Export: E  Code Highlighting Inline code: variable\nCode block:\nporridge = \u0026quot;blueberry\u0026quot; if porridge == \u0026quot;blueberry\u0026quot;: print(\u0026quot;Eating...\u0026quot;)  Math In-line math: $x + y = z$","tags":null,"title":"Slides","type":"slides"}]